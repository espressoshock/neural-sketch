% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%  neural-sketch-measure.dtx
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% \iffalse
%<*driver>
\documentclass{ltxdoc}
\EnableCrossrefs
\CodelineIndex
\RecordChanges

\begin{document}
\DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi

\ProvidesFile{neural-sketch-measure.dtx}%
[2025/01/22 v0.2 neural-sketch-measure – Simplified distance measurement for neural-sketch]

% <*package>
%    \begin{macrocode}
\RequirePackage{tikz}
\RequirePackage{xparse}
\RequirePackage{expl3}
\usetikzlibrary{calc}

\ExplSyntaxOn

% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% Key definitions for measurement options with simplified interface
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
\keys_define:nn { nsk/measure }
{
	axis .choice:,
	axis / horizontal .code:n = { \tl_set:Nn \l__nsk_measure_axis_tl {horizontal} },
	axis / vertical .code:n = { \tl_set:Nn \l__nsk_measure_axis_tl {vertical} },
	axis .default:n = {horizontal},
	axis .initial:n = {horizontal},

	from .tl_set:N = \l__nsk_measure_from_tl,
	from .initial:n = {},
	from .default:n = {},
	to .tl_set:N = \l__nsk_measure_to_tl,
	to .initial:n = {},
	to .default:n = {},

	unknown .code:n =
		{
			\msg_warning:nn {nsk-measure}{Unrecognized~key~`\l_keys_key_tl'~will~be~ignored.}
		},
}

% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% Public Interface
%
%   \nskMeasure[<keys>]
%
%   Keys:
%     axis = horizontal (default) or vertical,
%     from = <node>.<anchor>,
%     to   = <node>.<anchor>
%
%   Behavior:
%     - When called with an optional argument, it computes the distance from the “from”
%       point to the “to” point along the specified axis (using the absolute value so the distance
%       is always positive) and sets \pgfmathsetlengthmacro into \nskDistance.
%
%     - When called without any argument, it simply inserts (typesets) the last measured distance stored in \nskDistance.
%
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
\NewDocumentCommand{\nskMeasure}{ o }
{
	\IfNoValueTF{#1}
	{
		\nskDistance
	}
	{
		% Optional argument provided: process options and compute measurement.
		\keys_set:nn { nsk/measure } {#1}

		% Split the 'from' key value into node and anchor parts.
		\seq_set_split:Nnx \l_tmpa_seq { . } { \l__nsk_measure_from_tl }
		\seq_pop_left:NN \l_tmpa_seq \l__nsk_measure_from_node_tl
		\tl_set:Nx \l__nsk_measure_from_anchor_tl { \seq_use:Nn \l_tmpa_seq { . } }

		% Split the 'to' key value into node and anchor parts.
		\seq_set_split:Nnx \l_tmpa_seq { . } { \l__nsk_measure_to_tl }
		\seq_pop_left:NN \l_tmpa_seq \l__nsk_measure_to_node_tl
		\tl_set:Nx \l__nsk_measure_to_anchor_tl { \seq_use:Nn \l_tmpa_seq { . } }

		% Compute the difference between the two anchor points.
		\pgfpointdiff
			{\pgfpointanchor{\l__nsk_measure_to_node_tl}{\l__nsk_measure_to_anchor_tl}}
			{\pgfpointanchor{\l__nsk_measure_from_node_tl}{\l__nsk_measure_from_anchor_tl}}

		% Depending on the axis, compute and store the absolute value of the difference
		% directly into \nskDistance using \pgfmathsetlengthmacro.
		\tl_if_eq:NnTF \l__nsk_measure_axis_tl {horizontal}
		{\pgfmathsetlengthmacro{\nskDistance}{abs(\pgf@x)}}
		{\pgfmathsetlengthmacro{\nskDistance}{abs(\pgf@y)}}
	}
}
\ExplSyntaxOff
%    \end{macrocode}
% </*package>
\endinput
