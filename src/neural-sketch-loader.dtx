% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%  neural-sketch-loader.dtx
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ <<<
% \iffalse
%<*driver>
\documentclass{ltxdoc}
\EnableCrossrefs
\CodelineIndex
\RecordChanges

\begin{document}
\DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi

\ProvidesFile{neural-sketch-loader.dtx}%
[2025/02/01 v0.1 neural-sketch-loader]

% \title{neural-sketch-loader.sty\\[1ex]
%        Loader logic for optional neural-sketch modules}
% \author{Your Name <you@example.com>}
% \date{\today}
% \maketitle
% \StopEventually{}
%
% This dtx file extracts to "neural-sketch-loader.sty".
% It defines a user command \nskUseModule to load the optional modules
% (bridge, coords, etc.). 
% We rely on the naming scheme "neural-sketch-<module>.sty" in the same folder 
% or on the TEX search path.

% \StopEventually{}

% implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ <<<
%<*package>
%    \begin{macrocode}
\ExplSyntaxOn

% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% G-Modules
% 1) A clist of recognized modules:
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ <<<
\clist_new:N \g__nsk_known_modules_clist
% optionals ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ <<<
\clist_set:Nn \g__nsk_known_modules_clist
{
	bridges,
	coords,
	groups,
	containers,
	annotations,
	decorations,
	render,
  measure,
}

% helpers ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ <<<
% - to load the given module if present
\cs_new_protected_nopar:Npn \__nsk_load_module_if_exists:nn #1#2
{
	% #1 = short name (e.g. "bridge"), #2 = actual .sty (e.g. "neural-sketch-bridge.sty")
	% Only load if not already loaded:
	\IfFileExists{#2.sty}
	{
		\RequirePackage{#2}
	}
	{
		% halts exec ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ <<<
		\msg_new:nnn {neural-sketch}{moduleNotFound}{
			The~requested~module~`#1'~could~not~be~found~while~loading~via~\nskUseModule.
		}
		\msg_fatal:nn {neural-sketch}{moduleNotFound}
	}
}

% known modules ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ <<<
\cs_new_protected_nopar:Npn \__nsk_load_all_modules:
{
	\clist_map_inline:Nn \g__nsk_known_modules_clist
	{
		\tl_set:Nx \l_tmpa_tl { neural-sketch-##1 }
		\__nsk_load_module_if_exists:nn {##1} { \tl_use:N \l_tmpa_tl }
	}
}

% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% Public Interface
% - (user-facing)
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ <<<
\NewDocumentCommand \nskUseModule { m }
{
	\__nsk_usemodule_main:n { #1 }
}

\cs_new_protected_nopar:Npn \__nsk_usemodule_main:n #1
{
	% Check if user wrote "*" => load all modules:
	\tl_if_eq:nnTF {#1}{*}
	{
		\__nsk_load_all_modules:
	}
	{
		% Otherwise parse comma list of module names
		\clist_set:Nn \l_tmpa_clist {#1}
		\clist_map_inline:Nn \l_tmpa_clist
		{
			\tl_set:Nx \l_tmpb_tl { neural-sketch-##1 }
			\__nsk_load_module_if_exists:nn {##1} { \l_tmpb_tl }
		}
	}
}

\ExplSyntaxOff
%    \end{macrocode}
%</package>
\endinput
