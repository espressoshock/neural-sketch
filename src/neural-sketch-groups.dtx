% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%  neural-sketch-groups.dtx
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ <<<
% \iffalse
%<*driver>
\documentclass{ltxdoc}
\EnableCrossrefs
\CodelineIndex
\RecordChanges

\begin{document}
\DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi

\ProvidesFile{neural-sketch-groups.dtx}%
[2025/01/22 v0.1 neural-sketch-groups]

% \title{neural-sketch-groups.sty\\
%        Grouping support for neural-sketch}
% \author{Vincenzo Buono}
% \date{\today}
% \maketitle
%
% \StopEventually{}
%
% implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ <<<
%<*package>
%    \begin{macrocode}
\ExplSyntaxOn

% ---------------------------------------------------------------------
% 1) Global Data Structures
% ---------------------------------------------------------------------
\prop_new:N \l_nsk_group_unknown_prop
\tl_set:Nn \l_nsk_group_refnode_id_tl {__nsk_phantom_refnode}


% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% Positioning parsing and smart anchor detections
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ <<<
\cs_new_protected_nopar:Npn \nsk__group_parse_pos:
{

% "below right=0cm and 0cm of basics"
\seq_set_split:Nnx \l_tmpa_seq {=}{\l_nsk_group_pos_tl}
\seq_show:N \l_tmpa_seq

% dira/b
\tl_clear_new:N \l_nsk_group_ps_dira_tl
\tl_clear_new:N \l_nsk_group_ps_dirb_tl

% If there's at least two items, we can inspect the first part
%    (the directions) to pick a multi‐word anchor.
\int_compare:nNnT { \seq_count:N \l_tmpa_seq } > {1}
{
% \l_tmpa_tl := "below right" (for example)
\tl_set:Nx \l_tmpa_lx_tl { \seq_item:Nn \l_tmpa_seq {1} }
% 0cm and 0cm of basics.<..>
\tl_set:Nx \l_tmpa_rx_tl { \seq_item:Nn \l_tmpa_seq {2} }

% split lx side ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ <<<
% split below right
\seq_set_split:Nnx \l_tmpa_ps_seq {~} { \tl_use:N \l_tmpa_lx_tl }

\int_compare:nNnT { \seq_count:N \l_tmpa_ps_seq } = {1}
{
\tl_set:Nx \l_nsk_group_ps_dira_tl { \seq_item:Nn \l_tmpa_ps_seq {1} }
}

\int_compare:nNnT { \seq_count:N \l_tmpa_ps_seq } = {2}
{
\tl_set:Nx \l_nsk_group_ps_dira_tl { \seq_item:Nn \l_tmpa_ps_seq {1} }
\tl_set:Nx \l_nsk_group_ps_dirb_tl { \seq_item:Nn \l_tmpa_ps_seq {2} }
}
}

% prepend proper alignmet ~~~~~~~~~~~~~~~~~~~~~ <<<
\str_if_in:NnTF \l_nsk_group_pos_tl {.}
{}
{
	% not given --
	\tl_clear_new:N \l_anchor_tl
	\str_case:Vn \l_nsk_group_ps_dira_tl
	{
		{above}{\tl_set:Nn \l_anchor_tl {north}}
			{below}{\tl_set:Nn \l_anchor_tl {south}}
			{left}{\tl_set:Nn \l_anchor_tl {west}}
			{right}{\tl_set:Nn \l_anchor_tl {east}}
	}

	\tl_put_right:Nx \l_nsk_group_pos_tl
	{.\l_anchor_tl}
}
}

% ---------------------------------------------------------------------
% last-pos logic
% ---------------------------------------------------------------------
\cs_new_protected_nopar:Npn \nsk__process_last_pos_for_group:
{
	% Only proceed if the user gave 'last-pos'
	\tl_if_blank:VF \l_nsk_group_last_pos_tl
	{
		\seq_if_empty:NTF \g_nsk_block_id_history_seq
		{
			\msg_warning:nn {nsk}{No-previous-block-for-last-pos}
		}
		{
			% exec last block id retrieval ~~~~~~~~~~~~~~~ <<<
			% block is already registered, so get prev
			\nsk__internal_get_nth_block_id:n{2}
			\tl_set:Nx \l_tmpa_tl { \g_nsk_block_last_requested_block_id }

			\str_if_in:NnTF \l_nsk_group_last_pos_tl {=}
			{
				% case (a) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ <<<
				% There's at least one '='
				% Next see if "of" is in there
				% e.g. "below=0cm"
				% => add " of <blockID>"
				\tl_set:Nx \l_nsk_group_pos_tl
				{
					\exp_not:V \l_nsk_group_last_pos_tl\space of~\exp_not:V \l_tmpa_tl
				}
			}
			{
				% case (b) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ <<<
				% There's NO '=' in the user’s string
				% e.g. "below right"
				% => produce "below right=of <blockID>"
				\tl_set:Nx \l_nsk_group_pos_tl
				{
					\exp_not:V \l_nsk_group_last_pos_tl =of~\exp_not:V \l_tmpa_tl
				}
			}
		}
	}
}

\cs_new_protected_nopar:Npn \nsk__detect_anchor_pos:
{
	\nsk__group_parse_pos:

	% vertical  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ <<<
	\tl_if_blank:VTF \l_nsk_group_pos_tl
	{}
	{
		\tl_if_blank:VT \l_nsk_pos_align_tl
		{
			\tl_if_blank:VF \l_nsk_group_ps_dira_tl
			{
				\str_case:Vn \l_nsk_group_ps_dira_tl {
					{above}{\tl_set:Nn \l_nsk_pos_align_tl {south~}}
						{below}{\tl_set:Nn \l_nsk_pos_align_tl {north~}}
						{right}{\tl_set:Nn \l_nsk_pos_align_tl {west~}}
						{left}{\tl_set:Nn \l_nsk_pos_align_tl {east~}}
				}
			}

			\tl_if_blank:VF \l_nsk_group_ps_dirb_tl
			{
				\str_case:Vn \l_nsk_group_ps_dirb_tl {
					{right}{\tl_put_right:Nn \l_nsk_pos_align_tl {west}}
						{left}{\tl_put_right:Nn \l_nsk_pos_align_tl {east}}
				}
			}
		}
	}
}


%-----------------------------------------------------------
% Group
% logical grouping
%-----------------------------------------------------------
\keys_define:nn {nsk / group}
{
	% bounds id ------------------------------------------------
	bounds-name .tl_set:N = \l_nsk_group_bounds_name_tl,
	bounds-name .initial:n = {__nsk_container_bounds},
	bounds-name .default:n = {__nsk_container_bounds},

	% natural positioning using positioning library
	pos .tl_set:N = \l_nsk_group_pos_tl,
	pos .initial:n = { },
	pos .default:n = { },

	last-pos .tl_set:N = \l_nsk_group_last_pos_tl,
	last-pos .initial:n = { },

	% pos-alignment (edge flush) ~~~~~~~~~~~~~~~~~ <<<
	pos-align .tl_set:N = \l_nsk_pos_align_tl,
	pos-align .default:n = { },
	pos-align .initial:n = { },

	shift-x .fp_set:N = \l_nsk_group_x_fp,
	shift-x .initial:n = {0},
	shift-x .default:n = {0},

	shift-y .fp_set:N = \l_nsk_group_y_fp,
	shift-y .initial:n = {0},
	shift-y .default:n = {0},


	rotate .fp_set:N = \l_nsk_group_rotate_fp,
	rotate .initial:n = {0},
	rotate .default:n = {0},

	scale .fp_set:N = \l_nsk_group_scale_fp,
	scale .initial:n = {1},
	scale .default:n = {1},

	% forward unknown props to scope
	unknown .code:n =
		{
			% Store unknown key in the property list, using the content of \l_keys_key_tl as a string
			\prop_put:Nxx \l_nsk_group_unknown_prop
			{ \tl_use:N \l_keys_key_tl }
			{ #1 }
		},
}

%-----------------------------------------------------------------
% () Internal: build the final TikZ style as a comma-separated list
%    We'll store it in \l_tmpa_tl.
%-----------------------------------------------------------------

\cs_new_protected_nopar:Npn \nsk__build_group_style:
{
	% styles
	\tl_clear_new:N \l_tmpa_tl

	\tl_put_right:Nx \l_tmpa_tl
	{local~bounding~box=\l_nsk_group_bounds_name_tl, }

	\tl_if_blank:VF \l_nsk_group_pos_tl
	{
		\tl_put_right:Nx \l_tmpa_tl
		{ shift={(\l_nsk_group_refnode_id_tl)}, }

	}

	\tl_if_blank:VF \l_nsk_pos_align_tl
	{
		\tl_put_right:Nx \l_tmpa_tl
		{anchor={\l_nsk_pos_align_tl}, }

		% use pic workaround / wait for buffer write
		\tl_put_right:Nn \l_tmpa_tl
		{scope~anchor, }
	}


	% rotate=...
	\tl_put_right:Nx \l_tmpa_tl { rotate=\fp_use:N \l_nsk_group_rotate_fp, }

	% scale=...
	\tl_if_eq:nnF {\fp_to_decimal:N \l_nsk_group_scale_fp}{1.0}
	{ \tl_put_right:Nx \l_tmpa_tl { scale=\fp_use:N \l_nsk_group_scale_fp, } }

	% forward unknown keys as-is
	\prop_map_inline:Nn \l_nsk_group_unknown_prop
	{
		\tl_put_right:Nn \l_tmpa_tl
		{
			##1 = ##2,
		}
	}

}

%-----------------------------------------------------------------
% 4) Internal: draw the scope with the built style
%    #1 -> the style token list (passed by value)
%    #2 -> user content
%-----------------------------------------------------------------
\cs_new_protected:Npn \nsk__draw_group_scope_aux:nnn #1 #2 #3
{
	% phantom node ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ <<<
	\tl_if_blank:VF \l_nsk_group_pos_tl
	{
		\node[
			#1,
			draw=none,
			fill=none,
			name=\l_nsk_group_refnode_id_tl,
			anchor=center
		] {};
	}


	% actual draw ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ <<<
	\begin{scope}[#2]
		\pgftransformshift{
			\pgfpoint{\fp_use:N \l_nsk_group_x_fp}{\fp_use:N \l_nsk_group_y_fp}
		}
		#3
	\end{scope}
}

% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% Variant Generation :V
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ <<<
\cs_generate_variant:Nn \nsk__draw_group_scope_aux:nnn { VVn }

% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% Public Interface
% - (user-facing)
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ <<<
\NewDocumentCommand \nskGroup { O{} +m }
{

	\keys_set:nn { nsk / group } {#1}


	\nsk__process_last_pos_for_group:

	% maybe detect anchor pos
	\nsk__detect_anchor_pos:

	% Build a comma-separated style in \l_tmpa_tl
	\nsk__build_group_style:


	% draw
	\nsk__draw_group_scope_aux:VVn \l_nsk_group_pos_tl \l_tmpa_tl {#2}
}

\NewDocumentCommand \nskOnlayer { m +m }
{
	\begin{pgfonlayer}{#1}
		#2
	\end{pgfonlayer}
}

\NewDocumentCommand \nskOnbg { +m }
{
	\nskOnlayer{background}{#1}
}

\NewDocumentCommand \nskOnfg { +m }
{
	\nskOnlayer{foreground}{#1}
}


\ExplSyntaxOff
%\end{macrocode}
%</package>

\endinput
