%-----------------------------------------------------------
% Dev live unpacked .sty
%-----------------------------------------------------------

% RequirePackages ------------------------------------------
\RequirePackage{tikz}
\RequirePackage{expl3}
\usetikzlibrary{shapes.geometric, calc, fit}

\ExplSyntaxOn

%-----------------------------------------------------------
% Global props -
% to track auto-increment counters
%-----------------------------------------------------------
\prop_new:N \g_nsk_block_counters_prop

%-----------------------------------------------------------
% Block Primitive
%-----------------------------------------------------------
\keys_define:nn {nsk / block}
{
	% block type -----------------------------------------------
	type .tl_set:N = \l_nsk_block_type_tl,
	type .initial:n = {rectangle},
	type .default:n = {rectangle},

	% ref-id ---------------------------------------------------
	id .tl_set:N = \l_nsk_block_id_tl,
	id .initial:n = { },

	% coords  ---------------------------------------------------
	x .fp_set:N = \l_nsk_block_x_fp,
	x .initial:n = {0},
	x .default:n = {0},
	y .fp_set:N = \l_nsk_block_y_fp,
	y .initial:n  = {0},
	y .default:n = {0},

	% dimensions  -----------------------------------------------
	width .dim_set:N =  \l_nsk_block_width_dim,
	width .initial:n = {1cm},
	width .default:n = {1cm},

	height .dim_set:N = \l_nsk_block_height_dim,
	height .default:n = {1cm},
	height .initial:n = {1cm},

	% styles  ---------------------------------------------------
	border-type .choice:,
	border-type / solid .code:n = \tl_set:Nn \l_nsk_block_border_type_tl { solid },
	border-type / dashed .code:n = \tl_set:Nn \l_nsk_block_border_type_tl { dashed },
	border-type .initial:n = { solid },
	border-type .default:n = { solid },

	border-color .tl_set:N = \l_nsk_block_border_color_tl,
	border-color .initial:n = {red},
	border-color .default:n = {red},

	fill .tl_set:N = \l_nsk_block_fill_tl,
	fill .initial:n = {yellow},

	% -- The special pass-through key for arbitrary TikZ options.
	tikz-opts  .code:n =
		{
			% #1 is exactly what is inside { ... }, including any commas.
			% store it literally into \l_nsk_block_extra_style_tl
			\tl_set:Nn \l_nsk_block_extra_style_tl {#1}
		},
	tikz-opts  .initial:n = {},
	tikz-opts  .default:n = {},

	% -- text-anchoring
	% ---------------------------------------

	%---------------------------
	% text-north
	%---------------------------
	text-north .tl_set:N = \l_nsk_text_north_tl,
	text-north .initial:n = { },

	text-north-loc .tl_set:N = \l_nsk_text_north_loc_tl,
	text-north-loc .initial:n = { }, % e.g., 'above left', 'above', etc.

	text-north-style .tl_set:N = \l_nsk_text_north_style_tl,
	text-north-style .initial:n = { }, % e.g., 'color=red, font=\bfseries'

	%---------------------------
	% text-south
	%---------------------------
	text-south .tl_set:N = \l_nsk_text_south_tl,
	text-south .initial:n = { },

	text-south-loc .tl_set:N = \l_nsk_text_south_loc_tl,
	text-south-loc .initial:n = { },

	text-south-style .tl_set:N = \l_nsk_text_south_style_tl,
	text-south-style .initial:n = { },

	%---------------------------
	% text-east
	%---------------------------
	text-east .tl_set:N = \l_nsk_text_east_tl,
	text-east .initial:n = { },

	text-east-loc .tl_set:N = \l_nsk_text_east_loc_tl,
	text-east-loc .initial:n = { },

	text-east-style .tl_set:N = \l_nsk_text_east_style_tl,
	text-east-style .initial:n = { },

	%---------------------------
	% text-west
	%---------------------------
	text-west .tl_set:N = \l_nsk_text_west_tl,
	text-west .initial:n = { },

	text-west-loc .tl_set:N = \l_nsk_text_west_loc_tl,
	text-west-loc .initial:n = { },

	text-west-style .tl_set:N = \l_nsk_text_west_style_tl,
	text-west-style .initial:n = { },

	%---------------------------
	% text-center
	%  (TikZ calls it .center, but "center" anchor is effectively
	%   the "center" of the node, so we can do:
	%   at (<node>.center) [<loc options>]
	%---------------------------
	text-center .tl_set:N = \l_nsk_text_center_tl,
	text-center .initial:n = { },

	text-center-loc .tl_set:N = \l_nsk_text_center_loc_tl,
	text-center-loc .initial:n = { },

	text-center-style .tl_set:N = \l_nsk_text_center_style_tl,
	text-center-style .initial:n = { },
}

%-----------------------------------------------------------
% Position parsing
%-----------------------------------------------------------

%-----------------------------------------------------------
% Auto-generate an ID if user does not supply one
%-----------------------------------------------------------
\cs_new_protected_nopar:Npn \nsk__maybe_set_id:
{
	\tl_if_blank:VTF \l_nsk_block_id_tl
	{ \nsk__assign_autogenerated_id: }
	{ }
}

\cs_new_protected_nopar:Npn \nsk__assign_autogenerated_id:
{
	% If shape key not in the counters prop yet, init to 0
	\prop_if_in:NVF \g_nsk_block_counters_prop \l_nsk_block_type_tl
	{
		% (â˜…) Use \prop_gput to store globally:
		\prop_gput:NVn \g_nsk_block_counters_prop \l_nsk_block_type_tl { 0 }
	}

	% Retrieve current count
	\prop_get:NVN \g_nsk_block_counters_prop \l_nsk_block_type_tl \l_tmpa_tl

	% Convert to int and increment
	\int_set:Nn \l_tmpa_int { \l_tmpa_tl + 1 }

	% Update the counters property globally:
	\prop_gput:NVx \g_nsk_block_counters_prop \l_nsk_block_type_tl { \int_use:N \l_tmpa_int }

	% Construct "diamond1", "diamond2", "rectangle3", etc.
	\tl_set:No \l_nsk_block_id_tl
	{
		\tl_use:N \l_nsk_block_type_tl
		\int_use:N \l_tmpa_int
	}
}


% generate a new variant
%-----------------------------------------------------------
\cs_generate_variant:Nn \nsk__render_one_text_aux:nnnn { nVVV }

\cs_new_protected_nopar:Npn \nsk__render_one_text_aux:nnnn #1 #2 #3 #4
{
	% #1 = anchor name (literal or variable),
	% #2 = text content,
	% #3 = location/placement e.g. "above left",
	% #4 = style e.g. "color=red, font=\bfseries"
	% \node [#3, #4] at (\l_nsk_block_id_tl.#1) {#2};
	% \draw[shift=(\l_nsk_block_id_tl.#1)] coordinates{(0, 0)} node[#3 #4] {#2};

	\draw[shift=(\l_nsk_block_id_tl.#1)] node[#3, #4] {#2};
}

\cs_new_protected_nopar:Npn \nsk__render_one_text:nnnn #1 #2 #3 #4
{
	% #1 = the actual anchor name in TikZ (e.g., "north", "south", "center", etc.)
	% #2 = text content
	% #3 = location/placement (e.g., "above left", "right", etc.)
	% #4 = style (e.g., "color=red, font=\bfseries")
	% If the user did not provide text (#2), do nothing
	\tl_if_blank:VTF {#2}
	{
		% do nothing
	}
	{
		% Otherwise, call the :VVVV variant
		\nsk__render_one_text_aux:nVVV {#1} {#2} {#3} {#4}
	}
}

% We'll define a function that calls the above helper for each anchor:
\cs_new_protected_nopar:Npn \nsk__render_all_text:
{
	\nsk__render_one_text:nnnn {north}
	{ \l_nsk_text_north_tl }
	{ \l_nsk_text_north_loc_tl }
	{ \l_nsk_text_north_style_tl }

	\nsk__render_one_text:nnnn {south}
	{ \l_nsk_text_south_tl }
	{ \l_nsk_text_south_loc_tl }
	{ \l_nsk_text_south_style_tl }

	\nsk__render_one_text:nnnn {east}
	{ \l_nsk_text_east_tl }
	{ \l_nsk_text_east_loc_tl }
	{ \l_nsk_text_east_style_tl }

	\nsk__render_one_text:nnnn {west}
	{ \l_nsk_text_west_tl }
	{ \l_nsk_text_west_loc_tl }
	{ \l_nsk_text_west_style_tl }

	\nsk__render_one_text:nnnn {center}
	{ \l_nsk_text_center_tl }
	{ \l_nsk_text_center_loc_tl }
	{ \l_nsk_text_center_style_tl }
}


\cs_new_protected_nopar:Npn \nsk__block_debug:
{
	\iow_term:x {type   = \tl_use:N \l_nsk_block_type_tl}
	\iow_term:x {x      = \fp_use:N \l_nsk_block_x_fp}
	\iow_term:x {y      = \fp_use:N \l_nsk_block_y_fp}
	\iow_term:x {width  = \dim_use:N \l_nsk_block_width_dim}
	\iow_term:x {height = \dim_use:N \l_nsk_block_height_dim}
}


\cs_new_protected_nopar:Npn \nsk__draw_block_aux:n #1
{

	\node [
		#1,
	] {};

}

% Generate a "V V V V" variant so that we can pass token-list
% variables or dimension variables by *value*.
\cs_generate_variant:Nn \nsk__draw_block_aux:n { V }

\cs_new_protected_nopar:Npn \nsk__build_block_style:
{
	% Build the style token list incrementally:
	\tl_clear_new:N \l_tmps_tl

	% id-ref ---------------------------------------------------
	\tl_put_right:No \l_tmps_tl { name=\l_nsk_block_id_tl,}

	% {x,y} pos ------------------------------------------------
	\tl_put_right:Nx \l_tmps_tl
	{at={(\fp_use:N \l_nsk_block_x_fp,\fp_use:N \l_nsk_block_y_fp)},}

	% shape-type -----------------------------------------------
	\tl_put_right:No \l_tmps_tl {shape=\l_nsk_block_type_tl,}
	% dims -----------------------------------------------------
	\tl_put_right:No \l_tmps_tl {minimum\space width=\l_nsk_block_width_dim,}
	\tl_put_right:No \l_tmps_tl {minimum\space height=\l_nsk_block_height_dim,}
	% borders --------------------------------------------------
	\tl_put_right:No \l_tmps_tl {draw=\l_nsk_block_border_color_tl,}
	\tl_put_right:No \l_tmps_tl {\l_nsk_block_border_type_tl,}
	% fill -----------------------------------------------------
	\tl_put_right:No \l_tmps_tl {fill=\l_nsk_block_fill_tl,}


	% pass-through ---------------------------------------------
	\tl_if_empty:VTF \l_nsk_block_extra_style_tl
	{ }
	{
		\tl_put_right:NV \l_tmps_tl {\l_nsk_block_extra_style_tl,}
	}


	% Now call the *variant* function which takes
	% params by value:
	\nsk__draw_block_aux:V
	\l_tmps_tl
}


\cs_new_protected_nopar:Npn \nsk__draw_block:
{
	% 1. draw the main block shape
	\nsk__build_block_style:

	% 2. draw the text anchorings
	\nsk__render_all_text:
}

%-----------------------------------------------------------
% Public Interface
% (user-facing)
%-----------------------------------------------------------
\NewDocumentCommand \nskBlock { O{} }
{
	\group_begin:

	% # 1 -> k=v list
	\keys_set:nn {nsk / block } {#1}

	% possibly autogenerate the id
	\nsk__maybe_set_id:

	\nsk__block_debug:

	\nsk__draw_block:

	\group_end:
}

\ExplSyntaxOff
